// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrackDaNutzz.Data;

namespace TrackDaNutzz.Data.Migrations
{
    [DbContext(typeof(TrackDaNutzzDbContext))]
    [Migration("20190605205217_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TrackDaNutzz.Data.Models.BettingAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("HandPlayerHandId");

                    b.Property<int?>("HandPlayerPlayerId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Round")
                        .IsRequired()
                        .HasColumnName("Round")
                        .HasColumnType("VARCHAR(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Type")
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("Value")
                        .HasColumnName("Value")
                        .HasColumnType("MONEY");

                    b.HasKey("Id");

                    b.HasIndex("HandPlayerHandId", "HandPlayerPlayerId");

                    b.ToTable("BettingActions");
                });

            modelBuilder.Entity("TrackDaNutzz.Data.Models.Board", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Flop")
                        .IsRequired()
                        .HasColumnName("Flop")
                        .HasColumnType("VARCHAR(11)")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<string>("River")
                        .HasColumnName("River")
                        .HasColumnType("VARCHAR(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("Turn")
                        .HasColumnName("Turn")
                        .HasColumnType("VARCHAR(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("TrackDaNutzz.Data.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TrackDaNutzz.Data.Models.Hand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BoardId")
                        .HasColumnName("BoardId")
                        .HasColumnType("BIGINT");

                    b.Property<byte>("Button")
                        .HasColumnName("Button")
                        .HasColumnType("TINYINT");

                    b.Property<long>("Number")
                        .HasColumnName("Number")
                        .HasColumnType("BIGINT");

                    b.Property<decimal>("Pot")
                        .HasColumnName("Pot")
                        .HasColumnType("MONEY");

                    b.Property<decimal>("Rake")
                        .HasColumnName("Rake")
                        .HasColumnType("MONEY");

                    b.Property<int>("TableId")
                        .HasColumnName("TableId")
                        .HasColumnType("INT");

                    b.Property<DateTime>("Time")
                        .HasColumnName("Time")
                        .HasColumnType("DATETIME2");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("TableId");

                    b.ToTable("Hands");
                });

            modelBuilder.Entity("TrackDaNutzz.Data.Models.HandPlayer", b =>
                {
                    b.Property<long>("HandId")
                        .HasColumnName("HandId")
                        .HasColumnType("BIGINT");

                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerId")
                        .HasColumnType("INT");

                    b.Property<decimal>("FinalStack")
                        .HasColumnName("FinalStack")
                        .HasColumnType("MONEY");

                    b.Property<bool>("HasShowdown")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HasShowdown")
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<string>("HoleCards")
                        .HasColumnName("HoleCards")
                        .HasColumnType("VARCHAR(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<bool>("IsAllIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsAllIn")
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsInPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsInPosition")
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMuckCards")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsMuckCards")
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<int>("PositionId")
                        .HasColumnName("PositionId")
                        .HasColumnType("INT");

                    b.Property<byte>("SeatNumber")
                        .HasColumnName("SeatNumber")
                        .HasColumnType("TINYINT");

                    b.Property<decimal>("StartingStack")
                        .HasColumnName("StartingStack")
                        .HasColumnType("MONEY");

                    b.Property<long>("StatisticId")
                        .HasColumnName("StatisticId")
                        .HasColumnType("BIGINT");

                    b.HasKey("HandId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PositionId");

                    b.HasIndex("StatisticId");

                    b.ToTable("HandPlayers");
                });

            modelBuilder.Entity("TrackDaNutzz.Data.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsActive")
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TrackDaNutzz.Data.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("Type")
                        .HasColumnType("VARCHAR(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("TrackDaNutzz.Data.Models.Stake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BigBlind")
                        .HasColumnName("BigBlind")
                        .HasColumnType("MONEY");

                    b.Property<decimal>("SmallBlind")
                        .HasColumnName("SmallBlind")
                        .HasColumnType("MONEY");

                    b.HasKey("Id");

                    b.ToTable("Stakes");
                });

            modelBuilder.Entity("TrackDaNutzz.Data.Models.Statistic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AggressionFactor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AggressionFactor")
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<decimal>("BigBlindsWon")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 38, scale: 17)))
                        .HasColumnName("BigBlindsWon")
                        .HasColumnType("DECIMAL(15,2)");

                    b.Property<bool>("ContinuationBet")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ContinuationBet")
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<bool>("FourBet")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FourBet")
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<decimal>("MoneyWon")
                        .HasColumnName("MoneyWon")
                        .HasColumnType("MONEY");

                    b.Property<bool>("PreFlopRaise")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PreFlopRaise")
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<bool>("ThreeBet")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ThreeBet")
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<bool>("VoluntaryPutMoneyInPot")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VoluntaryPutMoneyInPot")
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("TrackDaNutzz.Data.Models.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnName("ClientId")
                        .HasColumnType("INT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnName("Currency")
                        .HasColumnType("VARCHAR(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<byte>("Size")
                        .HasColumnName("Size")
                        .HasColumnType("TINYINT");

                    b.Property<int>("StakeId")
                        .HasColumnName("StakeId")
                        .HasColumnType("INT");

                    b.Property<int>("VariantId")
                        .HasColumnName("VariantId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("StakeId");

                    b.HasIndex("VariantId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("TrackDaNutzz.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday")
                        .HasColumnName("Birthday")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("VARCHAR(30)")
                        .HasMaxLength(30)
                        .IsUnicode(true);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FirstName")
                        .HasColumnType("VARCHAR(30)")
                        .HasMaxLength(30)
                        .IsUnicode(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName")
                        .HasColumnType("VARCHAR(30)")
                        .HasMaxLength(30)
                        .IsUnicode(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasColumnType("VARCHAR(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TrackDaNutzz.Data.Models.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HasAnte")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HasAnte")
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<string>("Limit")
                        .IsRequired()
                        .HasColumnName("Limit")
                        .HasColumnType("VARCHAR(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("Type")
                        .HasColumnType("VARCHAR(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("TrackDaNutzz.Data.Models.BettingAction", b =>
                {
                    b.HasOne("TrackDaNutzz.Data.Models.HandPlayer")
                        .WithMany("BettingActions")
                        .HasForeignKey("HandPlayerHandId", "HandPlayerPlayerId");
                });

            modelBuilder.Entity("TrackDaNutzz.Data.Models.Hand", b =>
                {
                    b.HasOne("TrackDaNutzz.Data.Models.Board", "Board")
                        .WithMany("Hands")
                        .HasForeignKey("BoardId");

                    b.HasOne("TrackDaNutzz.Data.Models.Table", "Table")
                        .WithMany("Hands")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrackDaNutzz.Data.Models.HandPlayer", b =>
                {
                    b.HasOne("TrackDaNutzz.Data.Models.Hand", "Hand")
                        .WithMany("HandPlayers")
                        .HasForeignKey("HandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrackDaNutzz.Data.Models.Player", "Player")
                        .WithMany("HandPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrackDaNutzz.Data.Models.Position", "Position")
                        .WithMany("HandPlayers")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrackDaNutzz.Data.Models.Statistic", "Statistic")
                        .WithMany("HandPlayers")
                        .HasForeignKey("StatisticId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrackDaNutzz.Data.Models.Player", b =>
                {
                    b.HasOne("TrackDaNutzz.Data.Models.User")
                        .WithMany("Players")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TrackDaNutzz.Data.Models.Table", b =>
                {
                    b.HasOne("TrackDaNutzz.Data.Models.Client", "Client")
                        .WithMany("Tables")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrackDaNutzz.Data.Models.Stake", "Stake")
                        .WithMany("Tables")
                        .HasForeignKey("StakeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrackDaNutzz.Data.Models.Variant", "Variant")
                        .WithMany("Tables")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
